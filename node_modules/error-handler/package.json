{
  "_args": [
    [
      {
        "raw": "error-handler@^0.1.4",
        "scope": null,
        "escapedName": "error-handler",
        "name": "error-handler",
        "rawSpec": "^0.1.4",
        "spec": ">=0.1.4 <0.2.0",
        "type": "range"
      },
      "/Users/malaklopez/Projects/generalAssembly-js-Projects/finalProjects/workingApps/ezl-angularExpress/angular-express-seed"
    ]
  ],
  "_from": "error-handler@>=0.1.4 <0.2.0",
  "_id": "error-handler@0.1.4",
  "_inCache": true,
  "_location": "/error-handler",
  "_npmUser": {
    "name": "lucthev",
    "email": "lucthevenard@gmail.com"
  },
  "_npmVersion": "1.4.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "error-handler@^0.1.4",
    "scope": null,
    "escapedName": "error-handler",
    "name": "error-handler",
    "rawSpec": "^0.1.4",
    "spec": ">=0.1.4 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/error-handler/-/error-handler-0.1.4.tgz",
  "_shasum": "aea77098cff51b0efd9473515b78f19dbd3ef578",
  "_shrinkwrap": null,
  "_spec": "error-handler@^0.1.4",
  "_where": "/Users/malaklopez/Projects/generalAssembly-js-Projects/finalProjects/workingApps/ezl-angularExpress/angular-express-seed",
  "author": {
    "name": "Luc Thevenard",
    "email": "lucthevenard@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/lucthev/error-handler/issues"
  },
  "dependencies": {},
  "description": "A module for gracefully handling server errors.",
  "devDependencies": {
    "bunyan": "~0.22.1",
    "jasmine-node": "^1.13.1",
    "request": "~2.33.0"
  },
  "directories": {},
  "dist": {
    "shasum": "aea77098cff51b0efd9473515b78f19dbd3ef578",
    "tarball": "https://registry.npmjs.org/error-handler/-/error-handler-0.1.4.tgz"
  },
  "homepage": "https://github.com/lucthev/error-handler#readme",
  "keywords": [
    "error",
    "handler",
    "domain"
  ],
  "license": "MIT",
  "main": "errorHandler.js",
  "maintainers": [
    {
      "name": "lucthev",
      "email": "lucthevenard@gmail.com"
    }
  ],
  "name": "error-handler",
  "optionalDependencies": {},
  "readme": "# error-handler\n\nerror-handler is a [Node.js](http://nodejs.org) module for handling server errors in a graceful manner.\n\n## Installation\n\n```\n$ npm install error-handler\n```\n\n## Usage\n\nHonestly, there's not much to it. Feel free to skip to the example.\n\n### ErrorHandler( request, response [, options] )\n\nHandle errors relating to the current ```request``` and ```response```. ```options``` is an object with the following fields, all optional:\n\n```handler```: a function to handle the error. The function must take as parameters ```request, response, error```, and must end the response within 1000 ms. If no handler is provided, defaults to sending a plain \"_Server error._\" message. That's ugly. You really don't want to leave this one out.\n\n```log```: something to log the error with; must be able to take ```{error: theError}, theError.stack``` as parameters. [bunyan](https://npmjs.org/package/bunyan) works; others might, too, or you can roll your own. Defaults to ```console.error```.\n\n```fatal```: boolean. Whether or not to exit the process in which the error occured, once the response has been sent. Uses exit code 1 (failure). Defaults to true.\n\n## Example\n\nHere's a simple example using Node's [Cluster](http://nodejs.org/api/cluster.html) module to restart worker processes on exit. This example is included in the [example](https://github.com/lucthev/error-handler/tree/master/example) folder.\n\n```javascript\nvar handleErrors = require('error-handler'),\n    http = require('http'),\n    bunyan = require('bunyan'),\n    cluster = require('cluster');\n\n// NOTE: in real life, you'd probably want to put the master and worker\n// scripts in separate files.\n\nif (cluster.isMaster) {\n\n  // Spawn a worker.\n  cluster.fork();\n\n  // We'll use bunyan for logging.\n  var logger = bunyan.createLogger({\n    name: 'example',\n    level: 'trace',\n    master: true\n  });\n\n  // Spawn another worker when one dies.\n  cluster.on('exit', function (worker, code, signal) {\n    logger.warn('Worker ' + worker.id + ' died.');\n\n    cluster.fork();\n  });\n\n} else if (cluster.isWorker) {\n\n  var logger = bunyan.createLogger({\n    name: 'example',\n    level: 'trace'\n  });\n\n  // The error handling function. Maybe render or send an error page\n  // in here. At any rate, please do better than this.\n  function errorHandler (req, res, err) {\n    res.writeHead(500, {'Content-Type': 'text/html'});\n    res.end(\n      '<html>' +\n        '<head><title>Error</title></head>' +\n        '<body><p>' + err.stack + '</p></body>' +\n      '</html>');\n  }\n\n  var server = http.createServer(function (req, res) {\n\n    // This takes care of errors. You'll want to call this ASAP.\n    handleErrors(req, res, {\n      log: logger.error.bind(logger),\n      handler: errorHandler      \n    });\n\n    // Put your application logic here.\n\n    // For illustration purposes only.\n    throw new Error('Some error from something.');\n  });\n\n  server.listen(3000, function () {\n    logger.info('Worker ' + cluster.worker.id + ' listening.');\n  });\n}\n```\n\n## License\n\n[MIT](https://github.com/lucthev/error-handler/blob/master/LICENSE.txt)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/lucthev/error-handler.git"
  },
  "scripts": {
    "example": "npm install -d && node example/example.js | ./node_modules/.bin/bunyan",
    "test": "jasmine-node --verbose --captureExceptions test/"
  },
  "version": "0.1.4"
}
