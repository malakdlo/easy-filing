{
  "_args": [
    [
      {
        "raw": "pdffiller-stream@^0.2.0",
        "scope": null,
        "escapedName": "pdffiller-stream",
        "name": "pdffiller-stream",
        "rawSpec": "^0.2.0",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "/Users/malaklopez/Projects/generalAssembly-js-Projects/finalProjects/workingApps/ezl-angularExpress/angular-express-seed"
    ]
  ],
  "_from": "pdffiller-stream@>=0.2.0 <0.3.0",
  "_id": "pdffiller-stream@0.2.0",
  "_inCache": true,
  "_location": "/pdffiller-stream",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/pdffiller-stream-0.2.0.tgz_1490062554679_0.6432092860341072"
  },
  "_npmUser": {
    "name": "jasonphillips",
    "email": "jphillips@ua.edu"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pdffiller-stream@^0.2.0",
    "scope": null,
    "escapedName": "pdffiller-stream",
    "name": "pdffiller-stream",
    "rawSpec": "^0.2.0",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pdffiller-stream/-/pdffiller-stream-0.2.0.tgz",
  "_shasum": "4ad8f2c67f9203e011c6755ab570dce4f7a170de",
  "_shrinkwrap": null,
  "_spec": "pdffiller-stream@^0.2.0",
  "_where": "/Users/malaklopez/Projects/generalAssembly-js-Projects/finalProjects/workingApps/ezl-angularExpress/angular-express-seed",
  "author": {
    "name": "original: John Taylor and David Baldwynn; stream fork: Jason Phillips"
  },
  "bugs": {
    "url": "https://github.com/jasonphillips/pdffiller-stream/issues"
  },
  "dependencies": {
    "lodash": "^4.17.4"
  },
  "description": "Take an existing PDF Form and data and PDF Filler will create a new PDF with all given fields populated.",
  "devDependencies": {
    "mocha": "^3.2.0",
    "should": "^11.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "4ad8f2c67f9203e011c6755ab570dce4f7a170de",
    "tarball": "https://registry.npmjs.org/pdffiller-stream/-/pdffiller-stream-0.2.0.tgz"
  },
  "gitHead": "1a8881107519b23a44933872bed443872be420b2",
  "homepage": "https://github.com/jasonphillips/pdffiller-stream#readme",
  "keywords": [
    "nodejs",
    "pdftk",
    "fdf",
    "pdffiller",
    "pdf"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jasonphillips",
      "email": "jphillips@ua.edu"
    }
  ],
  "name": "pdffiller-stream",
  "optionalDependencies": {},
  "private": false,
  "readme": "PDF Filler Stream\n======\n\n[![npm version](https://badge.fury.io/js/pdffiller-stream.svg)](https://badge.fury.io/js/pdffiller-stream)\n\n> This is a fork of the [pdf-filler](https://github.com/pdffillerjs/pdffiller) package, modified to return promises and readable streams, by piping data in/out of a spawned pdftk process instead of temporarily writing files to disk.\n\n> The goal is cleaner integration, in eg. a microservices context, where it is preferable not to write multiple temporary files to disk and where you may wish to stream the generated pdf directly to a service like AWS.\n\n[![NPM](https://nodei.co/npm/pdffiller-stream.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/pdffiller-stream/)\n\nA node.js PDF form field data filler and FDF generator toolkit. This essentially is a wrapper around the PDF Toolkit library <a target=\"_blank\" href=\"http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/\">PDF ToolKit</a>.\n\n\nQuick start\n-----------\n\n**You must first have `pdftk` (from pdftk-server, found [here](https://www.pdflabs.com/tools/pdftk-server/)) installed correctly on your platform.**\n\nThen, install this library:\n\n```bash\nnpm install pdffiller-stream --save\n```\n\n**Note for MacOS / OSX Developers** - the main `pdftk` package for OSX is currently broken as of OS 10.11, but PDFLabs released an alternative build that should work normally on the platform: https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-mac_osx-10.11-setup.pkg\n\n\n\n## Examples\n\n#### 1.Fill PDF with existing FDF Data\n\n````javascript\nimport pdfFiller from 'pdffiller-stream';\n\nconst sourcePDF = \"test/test.pdf\";\n\nconst data = {\n    \"last_name\" : \"John\",\n    \"first_name\" : \"Doe\",\n    \"date\" : \"Jan 1, 2013\",\n    \"football\" : \"Off\",\n    \"baseball\" : \"Yes\",\n    \"basketball\" : \"Off\",\n    \"hockey\" : \"Yes\",\n    \"nascar\" : \"Off\"\n};\n\npdfFiller.fillForm( sourcePDF, data)\n    .then((outputStream) => {\n        // use the outputStream here;\n        // will be instance of stream.Readable\n    }).catch((err) => {\n        console.log(err);\n    });\n\n````\n\nThis will take the test.pdf, fill the fields with the data values and stream a filled in, read-only PDF.\n\nYou can use the returned stream to write a file to disk using a standard library like `fs.createWriteStream(desination)`, or send it directly to a service like AWS (which accepts streams as input).\n\nA chainable convenience method `toFile` is attached to the response, if you simply wish to write the stream to a file with no fuss:\n\n```javascript\npdfFiller.fillForm( sourcePDF, data)\n    .toFile('outputFile.PDF')\n    .then(() => {\n        // your file has been written \n    }).catch((err) => {\n        console.log(err);\n    });\n```\n\nCalling `fillFormWithFlatten()` with `shouldFlatten = false` will leave any unmapped fields still editable, as per the `pdftk` command specification.\n\n```javascript\n\nconst shouldFlatten = false;\n\npdfFiller.fillFormWithFlatten(sourcePDF, data, shouldFlatten)\n    .then((outputStream) {\n        // etc, same as above\n    })\n```\n\n\n#### 2. Generate FDF Template from PDF\n\n````javascript\nimport pdfFiller from 'pdffiller-stream';\n\nconst sourcePDF = \"test/test.pdf\";\n\n// Override the default field name regex. Default: /FieldName: ([^\\n]*)/\nconst nameRegex = null;  \n\nconst FDF_data = pdfFiller.generateFDFTemplate(sourcePDF, nameRegex).then((fdfData) => {\n    console.log(fdfData);\n}).catch((err) => {\n    console.log(err);\n});\n\n````\n\nThis will print out this\n```json\n{\n    \"last_name\" : \"\",\n    \"first_name\" : \"\",\n    \"date\" : \"\",\n    \"football\" : \"\",\n    \"baseball\" : \"\",\n    \"basketball\" : \"\",\n    \"hockey\" : \"\",\n    \"nascar\" : \"\"\n}\n```\n\n#### 3. Map form fields to PDF fields\n````javascript\nimport pdfFiller from 'pdffiller-stream';\n\nconst conversionMap = {\n\n    \"lastName\": \"last_name\",\n    \"firstName\": \"first_name\",\n    \"Date\": \"date\",\n    \"footballField\": \"football\",\n    \"baseballField\": \"baseball\",\n    \"bballField\": \"basketball\",\n    \"hockeyField\": \"hockey\",\n    \"nascarField\": \"nascar\"\n};\n\nconst FormFields = {\n    \"lastName\" : \"John\",\n    \"firstName\" : \"Doe\",\n    \"Date\" : \"Jan 1, 2013\",\n    \"footballField\" : \"Off\",\n    \"baseballField\" : \"Yes\",\n    \"bballField\" : \"Off\",\n    \"hockeyField\" : \"Yes\",\n    \"nascarField\" : \"Off\"\n};\n\npdfFiller.mapForm2PDF(data, convMap).then((mappedFields) => {\n    console.log(mappedFields);\n});\n````\n\nThis will print out the object below.\n```json\n\n{\n    \"last_name\" : \"John\",\n    \"first_name\" : \"Doe\",\n    \"date\" : \"Jan 1, 2013\",\n    \"football\" : \"Off\",\n    \"baseball\" : \"Yes\",\n    \"basketball\" : \"Off\",\n    \"hockey\" : \"Yes\",\n    \"nascar\" : \"Off\"\n\n}\n```\n\n#### 4. Convert fieldJson to FDF data\n````javascript\nimport pdfFiller from 'pdffiller-stream';\n\nconst fieldJson = [\n    {\n        \"title\" : \"last_name\",\n        \"fieldfieldType\": \"Text\",\n        \"fieldValue\": \"Doe\"\n    },\n    {\n        \"title\" : \"first_name\",\n        \"fieldfieldType\": \"Text\",\n        \"fieldValue\": \"John\"\n    },\n    {\n        \"title\" : \"date\",\n        \"fieldType\": \"Text\",\n        \"fieldValue\": \"Jan 1, 2013\"\n    },\n    {\n        \"title\" : \"football\",\n        \"fieldType\": \"Button\",\n        \"fieldValue\": false\n    },\n    {\n        \"title\" : \"baseball\",\n        \"fieldType\": \"Button\",\n        \"fieldValue\": true\n    },\n    {\n        \"title\" : \"basketball\",\n        \"fieldType\": \"Button\"\n        \"fieldValue\": false\n    },\n    {\n        \"title\" : \"hockey\",\n        \"fieldType\": \"Button\"\n        \"fieldValue\": true\n    },\n    {\n        \"title\" : \"nascar\",\n        \"fieldType\": \"Button\"\n        \"fieldValue\": false\n    }\n];\n\n\nconst FDFData = pdfFiller.convFieldJson2FDF(data);\n\nconsole.log(FDFData)\n````\n\nThis will print out:\n\n````json\n{\n    \"last_name\" : \"John\",\n    \"first_name\" : \"Doe\",\n    \"date\" : \"Jan 1, 2013\",\n    \"football\" : \"Off\",\n    \"baseball\" : \"Yes\",\n    \"basketball\" : \"Off\",\n    \"hockey\" : \"Yes\",\n    \"nascar\" : \"Off\"\n};\n````\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jasonphillips/pdffiller-stream.git"
  },
  "scripts": {
    "test": "mocha test/test.js"
  },
  "version": "0.2.0"
}
